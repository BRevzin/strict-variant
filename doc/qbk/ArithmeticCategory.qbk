[section:arithmetic_category Type trait `arithmetic_category`]

In C++, the term ['arithmetic type] refers to a fundamental type which is either ['integral] or ['floating point].

As part of the definition of `safely_constructible`, `strict_variant` makes a finer classification of these types,
and assigns a portable ['conversion rank] to each such type.

The type trait `arithmetic_category` computes the category of a given arithmetic type.

[h3 Declaration]

[strict_variant_arithmetic_category]

[h3 Valid Expressions]

[table
  [[expression] [value]]
  [[`T`] [ any arithmetic type]]
  [[`strict_variant::mpl::arithmetic_category<T>::value`][ The `arithmetic_category` of `T`. ]]]


[h3 Definition]

[table
 [[Fundmental Type] [`arithmetic_category`]]
  [[`(unsigned) short`] [`integer`]]
  [[`(unsigned) int`] []]
  [[`(unsigned) long`] []]
  [[`(unsigned) long long`]]
  [[`signed char`] [ `character`]]
  [[`char`] []]
  [[`unsigned char`] []]
  [[`char16_t`] []]
  [[`char32_t`] []]
  [[`float`][ `floating` ]]
  [[`double`][]]
  [[`long double`][]]
  [[`bool`][ `boolean`]]
  [[`wchar_t`][`wide_char`]]
]

[note You are free to specialize this trait to support other arithmetic types, such as implementation-specific extended integers.

      By default, any type for which `std::is_integral` reports `true` and which is not listed above will be categorized as `integer`.]

[endsect]
