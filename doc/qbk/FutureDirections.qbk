[section Future Directions]

[h4 `constexpr` support]

`constexpr` support is somewhat harder to do well at C++11 standard compared to
at C++14. And since `constexpr` computations cannot make dynamic allocations,
it's not consistent with `recursive_wrapper` which is an essential
component of `easy_variant`. Any `constexpr` usage would be somewhat
orthogonal to the bulk of the development work so far.

It could be added in the future, but for now we simply use placement-new in our
storage and there is no `constexpr` support. We could use a more sophisticated
storage object, like the recursive union used in `eggs::variant`, without changing
the existing code much. But again, at C++11 standard, it's much harder to do
something useful within a visitor than it is at C++14, so it's not all that
attractive.

If you need this, you might want to take a good look at `eggs::variant`.

[h4 `allocator` support]

Since `recursive_wrapper` makes dynamic allocations on behalf of the variant,
a quite natural refinement would be to allow custom allocators to be used with
the wrapper.

Most likely, the allocator should become a template parameter and a member of
the `strict_variant` itself, which then passes it on to any `recursive_wrapper`
that are constructed. But execution of this plan is left to future work.

[h4 Extract heap objects]

One way to mitigate the costs of using `recursive_wrapper` in the variant would
be if it were possible to "take ownership" of the dynamic allocation from the
variant. The idea would be, once the contained type has been determined to be
`recursive_wrapper<T>`, we could imagine a function which consumes the variant
and yields `unique_ptr<T>`, taking ownership of the pointer that is in storage.

This is also left to future work.

[h4 Improve `noexcept` annotations of `variant` when using `recursive_wrapper`?]

One of the basic design ideas here is to use `recursive_wrapper` when a type
has a throwing move.

However, this has the potential to reduce the quality of our `noexcept`
annotations in certain situations.

The reason is that, `recursive_wrapper` is supposed to work
also when the type is incomplete -- in that case the traits that determine
whether special member functions of the variant throw, basically have to assume
that they might, since we can't check the actual type.

In cases when the type *is* complete, we could introduce a different wrapper,
say, `heap_wrapper` or something, which would be the same, but we would be able
to interrogate the type to determine situations in which it throws.

Now, usually you would only use `heap_wrapper` when the type has a throwing move,
and in that case, it likely also has a throwing copy. So not much is likely to
be gained by `heap_wrapper` here.

It would be nice if, when `recursive_wrapper` is used with a type which is
incomplete, but doesn't actually throw, we can actually deduce that fact.
But as far as I know this isn't feasible -- the `noexcept` annotations on the 
`variant` special member functions must be complete at the point of
instantiation of the variant. So we have to assume the worst when the user uses
`recursive_wrapper`, so far as I know.

[h4 Add an `operator = (T &&)` overload?]

Currently, the only conversions from non-variant types to variants happen in the
forwarding-reference constructor. A statement:

```
  var_t v;
  v = 5;
```

actually compiles to something like this:

```
  var_t v;
  v = var_t{5};
```

This is why assignment cannot work if *any* of the types in `strict_variant` has
a throwing move. Even if the value `5` as above does not.

Currently, the only assignment operators are the usual special member functions.

We could consider adding an `operator = (T&&)` overload so that syntax like

```
  v = 5;
```

is legal, even if `var_t` contains some types with throwing moves.

However,

# It would involve significant code duplication -- we would also have to duplicate
  the "generalizing constructors" which promote a variant to a variant
  over more types.
# There are already effective workarounds -- use `emplace`, the `emplace ctor`,
  or use `easy_variant`.

I haven't been able to convince myself that adding this is actually a good idea,
but I might be open to it in the future.

[h4 Support references using `std::reference_wrapper`?]

The `std::variant` does this, but it doesn't seem all that useful, and would introduce
more complex rules for safety.

[h4 Support arrays implicitly using `std::array`?]

It seems simpler to just explicitly forbid arrays, but I didn't do this yet either.

[endsect]
