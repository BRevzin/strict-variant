[section:safely_constructible Type relationship `safely_constructible`]

The `safely_constructible` type trait is a refinement of `std::is_constructible`,
which has special behavior for fundamental types and pointer types and forbids certain conversions.

[h3 Valid Expressions]

[table
  [[expression] [value]]
  [[`T, U`] [ any types]]
  [[`safely_constructible<T, U>::value`][ `true` if a `variant` for which `T` is one of the value types should be constructible from `U`. ]]]

[h3 Notes]

* Check, for both `T`, `U` if they are an arithmetic type or a pointer type, after `decay`.
* If both are arithmetic, then defer to [link strict_variant.reference.safe_arithmetic_conversion `safe_arithmetic_conversion`].
* If both are pointer, then defer to [link strict_variant.reference.safe_pointer_conversion `safe_pointer_conversion`].
* If one is arithmetic and the other is pointer, it is unsafe.
* Otherwise, it is okay.

[h3 Examples]

[strict_variant_safely_constructible_examples]

[note You ['may] specialize `safely_constructible` as you please in order to modify the behavior of `strict_variant`.]

[h3 Definition]

The complete definition of the `safely_constructible` template is given:

[strict_variant_safely_constructible]

[endsect]
