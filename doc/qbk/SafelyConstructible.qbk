[section:safely_constructible Type relationship `safely_constructible`]

The `safely_constructible` type trait is a refinement of `std::is_constructible`,
which has special behavior for fundamental types and pointer types and forbids certain conversions.

[h3 Valid Expressions]

[table
  [[expression] [value]]
  [[`T, U`] [ any types]]
  [[`safely_constructible<T, U>::value`][ `true` if a `variant` for which `T` is one of the value types should be constructible from `U`. ]]]

[h3 Notes]

* Conversions between any two [link strict_variant.reference.arithmetic_category arithmetic categories], or between one of those categories and a pointer type,
  are considered unsafe.
* If a conversion ['could] be narrowing on some conforming implementation of C++, then it is not safe.  
  (So, `long long` cannot be converted to `long` and `long` cannot be converted to `int`,
  even if you are on a 32-bit machine and they have the same size for you, because it could be narrowing on a 64-bit machine.)
  This is determined by checking if the [link strict_variant.reference.arithmetic_rank arithmetic rank] decreases as a result of the conversion.
* Signed can be converted to unsigned, but the reverse is not allowed (since it is implementation-defined).
* Conversions like `char *` to `const char *` are permitted, and standard conversions like array-to-pointer are permitted, but otherwise no pointer conversions are permitted.

When `T` or `U` is not in one of the above categories, `safely_constructible` falls back to `std::is_constructible`.

[h3 Examples]

[strict_variant_safely_constructible_examples]

[note You ['may] specialize `safely_constructible` as you please in order to modify the behavior of `strict_variant`.]

[h3 Definition]

The complete definition of the `safely_constructible` template is given:

[strict_variant_safely_constructible]

The helper `safe_arithmetic_conversion` is defined in terms of sign, [link strict_variant.reference.arithmetic_category arithmetic category] and [link strict_variant.reference.arithmetic_rank arithmetic rank] of its arguments.

[strict_variant_safe_arithmetic_conversion]

[endsect]
