[section Class template `variant`]

A type-safe discriminated union container.

Its definition, and some ancillary function templates, are brought in by `#include <strict_variant/variant.hpp>`.

(Declarations only are brought in by `<strict_variant/variant_fwd.hpp>`.)

[h3 Synopsis]

```
namespace strict_variant {

  // Used in tag dispatch
  template <typename T>
  struct emplace_tag {};

  template <typename First, typename... Types>
  class variant {

    variant();

    // Special member functions
    variant(const variant &);
    variant(variant &&);
    ~variant() noexcept;

    // Only available if all input types are no-throw move constructible
    variant & operator=(variant &&);
    variant & operator=(const variant &);

    template <typename T>
    variant(T &&);

    // Constructs the variant from a "subvariant"
    template <typename... OTypes>
    variant(const variant<Otypes...> &);

    template <typename... OTypes>
    variant(variant<Otypes...> &&);

    // Emplace ctor
    template <typename T, typename... Args>
    explicit variant(emplace_tag<T>, Args && ... args);

    // Emplace operation
    template <typename T, typename... Args>
    void emplace(Args &&... args);

    // Reports the runtime type.
    int which() const;

    // Access the contained value
    template <typename T>
    T * get();

    template <typename T>
    const T * get() const;

    template <std::size_t index>
    auto * get();

    template <std::size_t index>
    const auto * get() const;

    // Test for equality.
    bool operator == (const variant &) const;
    bool operator != (const variant &) const;
  };

  template <typename T, typename ... Types>
  T * get(variant<Types...> * v);

  template <typename T, typename ... Types>
  const T * get(const variant<Types...> * v);

  template <typename T, typename ... Types>
  T & get_or_default(variant<Types...> & v, T def = {});

  template <typename Visitor, typename Variant>
  void apply_visitor(Visitor && visitor, Variant && var);

  template <typename... Types>
  using easy_variant;

} // end namespace strict_variant
```

[h3 Description]

`variant` is the core class of the `strict_variant` library. It controls the
storage in which the value is contained, and provides an interface for accessing
the value and changing the value.

[h4 Notes]

The `strict_variant::variant` is in many ways similar to `boost::variant`, which strongly inspired this.  

(However, this interface is exception-free. If you want to have
analogues of the throwing functions in `boost::variant` you'll have to write them, which is pretty easy to do on top of the exception-free interface.)

The template arguments to `variant` are subject to a few hard restrictions:

# Must be `nothrow_destructible`. This is enforced by `static_assert`.
# Must not be a reference type. This is enforced by `static_assert`. Use `std::reference_wrapper` if you need this.
# Must be complete at point of instantiation of the `variant`.

Additionally, the properties of the template arguments determine the properties of the resulting variant.

* If the `First` type of the parameter list is `DefaultConstructible`, then `variant` is also. Otherwise it isn't.
* If each type is `CopyConstructible`, then `variant` is `CopyConstructible`.
* If each type is `MoveConstructible`, then `variant` is `MoveConstructible`.
* If each type is `Assignable` and `CopyConstructible` and `nothrow_move_constructible`, then `variant` is `Assignable`.
* If each type is `MoveAssignable` and `nothrow_move_constructible`, then `variant` is `MoveAssignable`.

Other properties of `variant`:

* If each type is `EqualityComparable`, then `variant` is `EqualityComparable`.
* If each type is `LessThanComparable`, then a comparator object, `VariantComparator`, suitable for `std::map` or `std::set`, may be obtained from `#include <strict_variant/variant_compare.hpp>`.
* If each type is `OutputStreamable`, then `variant` is `OutputStreamable`, if the header `#include <strict_variant/variant_stream_ops.hpp>` is included.
* If each type is `Hashable`, then `variant` is `Hashable`, if the header `#include <strict_variant/variant_hash.hpp>` is included.

[h4 Member Functions]

[variablelist Constructors

[[`variant()`]
 [ Attempts to default construct the `First` type.

   [variablelist
     [[Requires][`First` is `DefaultConstructible`.]]
     [[Throws][If `First()` does. ]]]]]

[[`variant(const variant &)`]
 [ Copy constructs a variant.

   [variablelist
     [[Requires][Each type `First, Types...` is `CopyConstructible`.]]
     [[Throws][If any of the copy constructors does.]]]]]

[[`variant(variant &&)`]
 [ Move constructs a variant.

   [variablelist
     [[Requires][Each type `First, Types...` is `MoveConstructible`.]]
     [[Throws][If any of the moves does, or if any type is `recursive_wrapper`.]]]]]

[[`variant(const variant<OFirst, OTypes...> &)`]
 [ Generalizing constructor.

   Copy constructs a variant from another variant on strictly fewer types.

   [variablelist
     [[Requires][Each type `OFirst, OTypes...` is template parameter of this `variant` also, modulo `const` and `recursive_wrapper`.]]
     [[Throws][If the copy constructor of the passed variant may throw.]]]]]

[[`variant(variant<OFirst, OTypes...> &&)`]
 [ Generalizing constructor.

   Move constructs a variant from another variant on strictly fewer types.

   [variablelist
     [[Requires][Each type `OFirst, OTypes...` is template parameter of this `variant` also, modulo `const` and `recursive_wrapper`.]]
     [[Throws][If the move constructor of the passed variant may throw.]]]]]

[[`variant(T &&)`]
 [ Construct from a forwarding reference.

   Attempts to convert `T` to one of the template parameters of this variant.

   This is resolved using overload resolution.

   However, the overload resolution process is modified using SFINAE, when the
   `variant` contains ['fundamental types].

   [itemized_list
     [Only ['safe conversions] of fundamental types are permitted. Conversions which are not [link strict_variant.reference.safely_constructible safe] do not participate in overload resolution. (See `strict_variant::safely_constructible`.)]
     [If multiple ['safe conversions] to fundamental types are possible, only those of the lowest rank are permitted. Those of higher rank do not participate in overload resolution.]]

   It turns out that when assigning a fundamental type to a variant, if there are fundamental types in the variant also, these rules break any ties among the fundamental types.

   For instance:

   ```
     variant<int, long> v{10};                    // Selects `int`, it is lower rank.
     variant<long, long long> v{10};              // Selects `long`, it is lower rank.
     variant<long, unsigned int> v{10};           // Selects `unsigned int`, it is lower rank.
     variant<long long, unsigned long> v{10};     // Selects `long long`, because `int -> unsigned long` is considered unsafe.
     variant<int, unsigned int> v{10};            // Selects `int`, it has a better conversion (overload resolution)

     variant<unsigned int, unsigned long> v{10u}; // Selects `unsigned int`, it is lower rank.
     variant<long, unsigned long long> v{10u};    // Selects `unsigned long long`, because `unsigned -> signed` is considered unsafe.
   ```

   Overload resolution might still be ambiguous with other, user-defined types in the variant.
  ]]

[[`variant(emplace_tag<T>, Args && ... args)`]
 [ Emplace-constructs a variant.

   Constructs a value of type `T` in the storage. Any additional arguments `args` are forwarded to `T`'s constructor.

   [variablelist
     [[Requires][`T` is one of the template parameter of this `variant`, modulo `const` and `recursive_wrapper`.]]
     [[Throws][If the selected constructor may throw.]]]]]
]

[variablelist Assignment

[[`variant & operator=(const variant &)`]
 [ Copy-assigns a variant.

   [variablelist
     [[Requires][Each type `First, Types...` is `Assignable`, `CopyConstructible`, and `nothrow_move_constructible`.]]
     [[Throws][If copy construction or copy assignment throws.]]]]]

[[`variant & operator=(variant &&)`]
 [ Move-assigns a variant.

   [variablelist
     [[Requires][Each type `First, Types...` is `MoveAssignable` and `nothrow_move_constructible`.]]
     [[Throws][If the engaged type is `recursive_wrapper<T>`, this may throw if a dynamic allocation fails or if move construction of `T` fails.
               If the type has a throwing move assignment, then this may throw such exceptions.
               Otherwise this call is `noexcept`.]]]]]

[[`template <typename T, typename ... Args> void emplace(Args && ... args)`]
 [ Emplaces a value of type `T` into the variant.

   Force the variant to a particular type and value.

   The user explicitly specifies the desired type as template parameter.

   There are actually two implementations of `emplace`, depending on whether
   the invoked ctor is `noexcept`. If it is, construction takes in place directly
   in the storage. If it is not, construction takes place on the stack, and the value
   is moved into storage. (For strong exception-safety.)

   `emplace` may be used to resolve ambiguity in assignment, or to put a value in the container
   which is not `nothrow_move_constructible`.

   [variablelist
     [[Requires][`T` must be a member of the variant, modulo `const` and `recursive_wrapper`, and ['either] the invoked constructor, ['or] the move constructor of `T`, must be `noexcept`.]]
     [[Throws][Only if the invoked constructor throws.]]]]]

]

[variablelist Destructor
[[`~variant() noexcept]
 [ Destroys the contained value. Never throws. ]]]

[variablelist Accessors

[[int which() const noexcept]
 [ Returns the `which` indicator value.

   The `which` value is an index into the list `First, Types...` of template parameters, indicating the currently contained type.]]

[[`template <typename T>
  T * get() noexcept`]
 []]

[[`template <typename T>
  const T * get() const noexcept`]
 [ Returns a pointer to the current value if `T` is the type of the currently contained value. (Ignoring `const` qualifier and `recursive_wrapper`.)
   Returns `nullptr` otherwise. ]]

[[`template <std::size_t index>
  auto * get() noexcept`]
 []]

[[`template <std::size_t index>
  const auto * get() const noexcept`]
 [ Returns a pointer to the current value if `which() == index`.
   Returns `nullptr` otherwise.

   (Unwraps any `recursive_wrapper`.)
 ]]

]

[variablelist Operators

[[bool operator ==(const variant & other) const]
 [ Checks if `which() == other.which()`. Then checks if the contained values compare equal using `operator ==`.

   [variablelist
     [[Requires][Each type `First, Types...` is `EqualityComparable`.]]
     [[Throws][If equality-comparison can throw.]]]]]

[[bool operator !=(const variant &) const]
 [ Returns the negation of `operator ==`. ]]]

[h4 Template Functions]

[variablelist

[[`template <typename T>
  T * get(variant *)`]
 []]

[[`template <typename T>
  const T * get(const variant *)`]
 []]

[[`template <std::size_t index>
  auto * get(variant *)`]
 []]

[[`template <std::size_t index>
  const auto * get(const variant *)`]
 [Equivalent to `variant::get` member function. ]]

[[`template <typename T>
  T & get_or_default(variant * v, T def = {})`]
 [ 
  Returns a reference to the stored value. If it does not currently have the
  indicated type, then the argument `def` is emplaced into the variant, and a
  reference to that value, within the variant, is returned.

   [variablelist
     [[Requires][`T` is one of the variant template parameters, modulo `const` and `recursive_wrapper`.]]
     [[Throws][Only if `v->emplace<T>(std::move(def))` throws.]]]]]

[[`template <typename Visitor, typename Variant>
   auto apply_visitor(Visitor && visitor, Variant && variant)`]
 [
   Applies `visitor` to the value contained in `variant`.

   This call is equivalent to the expression `visitor(value)`,
   where `visitor` and `value` have value-category corresponding to the arguments
   `visitor` and `variant`, and `value` has the run-time type of the value
   currently contained in `variant`.

   The return value is the result of that call.

   If `visitor` returns different types when different types from the `variant` are passed,
   the result type is a common base if one can be found. Otherwise the call is
   ill-formed.

   It is not possible to return an rvalue-reference -- `std::decay` will be
   applied. However it is possible to return an lvalue-reference.
  ]]

[[`template <typename Visitor, typename... Variants>
   auto apply_visitor(Visitor && visitor, Variant && ... variants)`]
  [
    Applies `visitor` simultaneously to each of the values contained in `variants`.

    This call is equivalent to `visitor(value1, value2, ...)`.

    This extended form is called *multivisitation*.

    To use it, you must include an extra header `<strict_variant/multivisit.hpp>`.
  ]]
]

[h4 Template Aliases]

[variablelist

[[`template <typename... Types> easy_variant`]
 [
   Template alias `easy_variant` is defined in terms of strict_variant.

   The purpose of `easy_variant` is to try to make a version of `strict_variant` which is
   more forgiving in regards to throwing moves.

   If one of the types in the list has a throwing move,
   it gets implicitly wrapped in `recursive_wrapper`, so that `strict_variant` can generate
   an assignment operator.

   Example implementation:

   ```
     template <typename... Ts>
     using easy_variant = variant<wrap_if_throwing_move_t<Ts>...>;
   ```

   where `wrap_if_throwing_move_t` is defined:


   ```
     struct <typename T, typename = std::enable_if_t<std::is_nothrow_destructible<T>::value && !std::is_reference<T>::value>>
     struct wrap_if_throwing_move {
       using type = typename std::conditional<std::is_nothrow_move_constructible<T>::value,
                                              T,
                                              recursive_wrapper<T>>::type;
     };

     template <typename T>
     using wrap_if_throwing_move_t = typename wrap_if_throwing_move<T>::type;
   ```]]]

[endsect]
