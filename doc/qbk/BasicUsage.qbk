[section:basic Basic Usage]

The "basic usage" of `strict_variant::variant` mirrors that of
`boost::variant`. If you are not familiar with `boost::variant`, I suggest
you have a look at [@boost:/libs/variant/doc/html/variant/tutorial.html#variant.tutorial.basic their tutorial] first.

[strict_variant_tutorial_basic]

[h4 Conclusion]

That should be enough to get you moving for most uses of `variant`. If you want
to see more advanced uses of `variant`, using lambda function visitors, etc.,
see the Advanced Usage page.

As a final remark, let me suggest another way of looking at `variant`.

Ostensibly, `variant` is just a standard container, like `vector`, `set`, or `optional`.

But another way of thinking about `variant` is that it is a simple and
efficient way of achieving runtime polymorphism.

Every student of C++ learns about inheritance, virtual inheritance, virtual
dispatch, and so on. And about how to achieve runtime polymorphism by creating an
interface base class, and making multiple classes that derive from / implement the interface.

Another way to get runtime polymorphism is, simply use a `variant` where you
would have used the base class, and use visitors to get polymorphism based on the runtime type.

Using a `variant` is attractive because:

# Inheritance creates tight-coupling -- a change to one of the objects may
  necessitate a change in the interface, and then to all of the objects. Objects
  held in a `variant` don't need to be related at all.
# Usually, inheritance leads to a design where you manipulate pointers to the base
  class, and end up allocating everything on the heap. With `variant`, the objects
  can be allocated on the stack, which can make a huge performance difference in some cases.
# Dispatching a visitor to a `variant` is very simple and transparent to the
  compiler. When the compiler encounters `apply_visitor`, it knows all of the different
  types that the variant could be holding, and it just has to select the right
  function to call based on the `which` value. With virtual dispatch, the compiler often
  can't actually know all the possible types until every compilation unit has
  been compiled, because any compilation unit can declare a new class which inherits
  from the base class. How virtual dispatch is implemented may vary from compiler
  to compiler, but typically it involves indirection through a "`vptr`" associated to
  each instance, which points to a table of function pointers called a "`vtable`"
  associated to each class. And we usually can't know all the possible `vptr` values until
  we've seen every compilation unit. So virtual dispatch is usually opaque to the optimizer.
  With a `variant`, the whole dispatch is transparent and can potentially be inlined.
  This can sometimes be alleviated by link-time optimizations
  and devirtualization optimizations, but not always, and at time of writing, not typically either.
# Variants can be used even in very restrictive software environments. Virtual dispatch
  ultimately relies on C++ vtables and RTTI. A variant will work even in a project
  which is compiled with `-fno-rtti`. Essentially, the `int which` value plays
  the role that the `vptr` and RTTI play.
# Sometimes, the same visitor can be used with multiple different variant types.
  This allows code reuse in cases where with an inheritance-based solution you might
  have needed to duplicate code.

Sometimes inheritance is really what you want and need, but in other cases, `variant`
is a good alternative, and a good tool for your modern C++ toolkit.

[endsect]
