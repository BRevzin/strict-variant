[section Alias template `easy_variant`]

`easy_variant` is an extension of `variant`, which includes generic handling for throwing moves in user-defined types.

It is thus a general-purpose variant type.

[h3 Description]

`easy_variant<T1, T2, ...>` is the same as `variant<T1, T2, ...>`, except that
if `T` has a throwing move, we substitute `recursive_wrapper<T>` for it. Since
this wrapper is pierced transparently in the `variant` interface, from the user's
point of view this works out just the same as if `T` were nothrow moveable.

Since `recursive_wrapper` is no-throw move constructible, `easy_variant` is always able to generate assignment operators and such
regardless of the `noexcept` status of the user-defined types which are passed to it.

[h3 Synopsis]

Defined in file `<strict_variant/variant.hpp>`:

[strict_variant_easy_variant]

where `wrap_if_throwing_move_t` is defined:

[strict_variant_wrap_if_throwing_move]

[endsect]
