[section Advanced Usage]

[h3 Emplace constructor]

[strict_variant_tutorial_emplace_ctor]

[h3 Generalizing constructor]

[strict_variant_tutorial_generalizing_ctor]

[h3 More general visitors]

One thing which you'll note in `boost::variant` docs is that in `boost::variant`,
a visitor should always be a structure and should derive from `boost::static_visitor`, or, failing that,
explicitly define a typedef `result_type` which matches the return type of the
function object.

```
struct formatter : boost::static_visitor<std::string> {
  std::string operator()(const std::string & s) const { return s; }
  std::string operator()(int i) const { return "[" + std::to_string(i) + "]"; }
};
```

In `strict_variant`, this isn't necessary, the return type will be deduced. So you can omit `static_visitor`.

This is necessary to support lambdas being used as visitors, for instance.

[h4 Lambda visitors]

[strict_variant_tutorial_lambda_visitor]

[h4 Generic visitors]

[strict_variant_tutorial_generic_visitor]

[h4 Polymorphic return type]

A more elaborate use of the deduced return-type feature involves function
objects that might return multiple different types depending on the arguments.

```
  TODO
```

This works as long as the returns can be reconciled in a fashion similar to `std::common_type`. [footnote Note that we don't actually use `std::common_type`: for one, that is C++14, for two, it wouldn't allow us to return references. We compromise by allowing the return of lvalue references but not rvalue references -- non-lvalue references will decay when returned by apply visitor.]

One feature of `boost::variant` which we ['don't currently support] is ['delayed visitation]. For this, you will
have to use a capturing lambda or some other sort of ad-hoc function object.

[h4 Other interesting visitor styles]

* In C++14, you can use generic lambdas as visitors also.
* If you incorporate code into your project like that proposed in [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0051r1.pdf PR0051],
  then you can glue multiple lambas together and use them as a visitor in one line:

```
  apply_visitor( overload( [](double d) -> std::string { return std::to_string(d); },
                           [](std::string s) -> std::string { return s; }
                         ),
                 v1 );
```

[h3 Multivisitation]

`strict_variant` has full support for visiting 2 or more variants simultaneously, just as `boost::variant` does.

However for this you must include `<strict_variant/multivisit.hpp>`.

[h3 Throwing Assignment]

Just like `boost::variant` and any other standard container, `strict_variant` can be moved, copied and assigned.

However, like `boost::variant` it has some restrictions.
[itemized_list
  [ Each type must be `nothrow-destructible` ]
  [ Each type must be copy or move-constructible ]]

`strict_variant` also requires that its types are `nothrow_destructible`.

However, `strict_variant` is different in that it can only be assignable if each type
is assignable AND each type is `nothrow_move_constructible`. If this doesn't happen,
compilation will fail with a `static_assert`.

Since that's not always possible for the types you may want to use it with, there are a few handy solutions.

Suppose that our goal is code like this:

[strict_variant_tutorial_throwing_assignment_goal_code]

This code will fail to compile, because `v` cannot be assigned if `X` has a throwing move.
We have a few possible remedies:

# [strict_variant_tutorial_throwing_assignment_fix1]
# [strict_variant_tutorial_throwing_assignment_fix2]
# [strict_variant_tutorial_throwing_assignment_fix3]

[endsect]
